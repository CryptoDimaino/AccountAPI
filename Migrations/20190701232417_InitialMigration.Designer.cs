// <auto-generated />
using System;
using AccountAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AccountAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190701232417_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccountAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckedOutStatus");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailPassword")
                        .IsRequired();

                    b.Property<int>("EventId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountAPI.Models.AccountProfile", b =>
                {
                    b.Property<int>("AccountProfileId");

                    b.Property<string>("Address");

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("SecretAnswer1");

                    b.Property<string>("SecretAnswer2");

                    b.Property<string>("SecretAnswer3");

                    b.Property<string>("SecretQuestion1");

                    b.Property<string>("SecretQuestion2");

                    b.Property<string>("SecretQuestion3");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("AccountProfileId");

                    b.ToTable("AccountProfiles");
                });

            modelBuilder.Entity("AccountAPI.Models.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeString")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("GameId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<bool>("UsedStatus");

                    b.HasKey("CodeId");

                    b.HasIndex("CodeString")
                        .IsUnique();

                    b.HasIndex("GameId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("AccountAPI.Models.ControllerType", b =>
                {
                    b.Property<int>("ControllerTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ControllerTypeId");

                    b.ToTable("ControllerTypes");

                    b.HasData(
                        new
                        {
                            ControllerTypeId = 1,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(4630),
                            Type = "Touch",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(4936)
                        },
                        new
                        {
                            ControllerTypeId = 2,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(5238),
                            Type = "Keyboard & Mouse",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(5243)
                        },
                        new
                        {
                            ControllerTypeId = 3,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(5254),
                            Type = "Xbox",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(5257)
                        },
                        new
                        {
                            ControllerTypeId = 4,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(5265),
                            Type = "Steering Wheel",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(5267)
                        });
                });

            modelBuilder.Entity("AccountAPI.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("EventId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(7436),
                            Location = "Chicago",
                            Name = "IEM",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(7727)
                        });
                });

            modelBuilder.Entity("AccountAPI.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ConnectionType");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("URLToDocumentation")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("AccountAPI.Models.GameAccount", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("AccountId");

                    b.HasKey("GameId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("GameAccount");
                });

            modelBuilder.Entity("AccountAPI.Models.GameControllerType", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("ControllerTypeId");

                    b.HasKey("GameId", "ControllerTypeId");

                    b.HasIndex("ControllerTypeId");

                    b.ToTable("GameControllerType");
                });

            modelBuilder.Entity("AccountAPI.Models.GamePlatform", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("PlatformId");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");
                });

            modelBuilder.Entity("AccountAPI.Models.GameRating", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("RatingId");

                    b.HasKey("GameId", "RatingId");

                    b.HasIndex("RatingId");

                    b.ToTable("GameRating");
                });

            modelBuilder.Entity("AccountAPI.Models.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PlatformTypeId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("PlatformId");

                    b.HasIndex("PlatformTypeId");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformId = 1,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(1217),
                            Name = "Steam",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(1529)
                        },
                        new
                        {
                            PlatformId = 2,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2043),
                            Name = "Microsoft Store",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2048)
                        },
                        new
                        {
                            PlatformId = 3,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2060),
                            Name = "Windows",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2062)
                        },
                        new
                        {
                            PlatformId = 4,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2070),
                            Name = "Android",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2073)
                        },
                        new
                        {
                            PlatformId = 5,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2081),
                            Name = "Steam VR",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2083)
                        },
                        new
                        {
                            PlatformId = 6,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2091),
                            Name = "Oculus",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2094)
                        },
                        new
                        {
                            PlatformId = 7,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2102),
                            Name = "Origin",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2105)
                        },
                        new
                        {
                            PlatformId = 8,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2113),
                            Name = "Uplay",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2115)
                        },
                        new
                        {
                            PlatformId = 9,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2123),
                            Name = "Epic",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2126)
                        },
                        new
                        {
                            PlatformId = 10,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2134),
                            Name = "Standalone",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2136)
                        },
                        new
                        {
                            PlatformId = 11,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2144),
                            Name = "Maniaplenet",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2146)
                        },
                        new
                        {
                            PlatformId = 12,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2154),
                            Name = "Play Station",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2157)
                        },
                        new
                        {
                            PlatformId = 13,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2165),
                            Name = "BattleNet",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2167)
                        },
                        new
                        {
                            PlatformId = 14,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2175),
                            Name = "Lego Mini Online",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2178)
                        },
                        new
                        {
                            PlatformId = 15,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2186),
                            Name = "League of Legends",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2189)
                        },
                        new
                        {
                            PlatformId = 16,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2196),
                            Name = "Intel Appup",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2199)
                        },
                        new
                        {
                            PlatformId = 17,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2207),
                            Name = "Cryptic Studios",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2209)
                        },
                        new
                        {
                            PlatformId = 18,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2217),
                            Name = "Amazon",
                            PlatformTypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2220)
                        },
                        new
                        {
                            PlatformId = 19,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2228),
                            Name = "McAfee LiveSafe",
                            PlatformTypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2230)
                        },
                        new
                        {
                            PlatformId = 20,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2238),
                            Name = "Eve Online",
                            PlatformTypeId = 1,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2241)
                        },
                        new
                        {
                            PlatformId = 21,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2249),
                            Name = "Apple",
                            PlatformTypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2251)
                        },
                        new
                        {
                            PlatformId = 22,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2259),
                            Name = "QQ",
                            PlatformTypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2262)
                        },
                        new
                        {
                            PlatformId = 23,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2271),
                            Name = "Media Accounts",
                            PlatformTypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2273)
                        },
                        new
                        {
                            PlatformId = 24,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2281),
                            Name = "Twitch",
                            PlatformTypeId = 2,
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 295, DateTimeKind.Local).AddTicks(2283)
                        });
                });

            modelBuilder.Entity("AccountAPI.Models.PlatformType", b =>
                {
                    b.Property<int>("PlatformTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("PlatformTypeId");

                    b.ToTable("PlatformTypes");

                    b.HasData(
                        new
                        {
                            PlatformTypeId = 1,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 294, DateTimeKind.Local).AddTicks(6570),
                            Name = "Game",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 294, DateTimeKind.Local).AddTicks(6917)
                        },
                        new
                        {
                            PlatformTypeId = 2,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 294, DateTimeKind.Local).AddTicks(7243),
                            Name = "Other",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 294, DateTimeKind.Local).AddTicks(7249)
                        });
                });

            modelBuilder.Entity("AccountAPI.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Definition")
                        .IsRequired();

                    b.Property<string>("ImageLink")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RatingsCountry")
                        .IsRequired();

                    b.Property<string>("RatingsSystem")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            Age = 0,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(1597),
                            Definition = "Titles rated EC (Early Childhood) have content that may be suitable for ages 3 and older. Contains no material that parents would find inappropriate.",
                            ImageLink = "Link to image",
                            Name = "Early Childhood",
                            RatingsCountry = "USA",
                            RatingsSystem = "ESRB",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(1889)
                        },
                        new
                        {
                            RatingId = 2,
                            Age = 0,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2194),
                            Definition = "Titles rated E (Everyone) have content that is generally suitable for all ages. May contain minimal cartoon, fantasy or mild violence and/or infrequent use of mild language.",
                            ImageLink = "Link to image",
                            Name = "Everyone",
                            RatingsCountry = "USA",
                            RatingsSystem = "ESRB",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2199)
                        },
                        new
                        {
                            RatingId = 3,
                            Age = 0,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2211),
                            Definition = "Titles rated E10+ (Everyone 10 and older) have content that is generally suitable for ages 10 and up. May contain more cartoon, fantasy or mild violence, mild language and/or minimal suggestive themes.themes.",
                            ImageLink = "Link to image",
                            Name = "Everyone 10+",
                            RatingsCountry = "USA",
                            RatingsSystem = "ESRB",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2214)
                        },
                        new
                        {
                            RatingId = 4,
                            Age = 0,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2222),
                            Definition = "Titles rated T (Teen) have content that is generally suitable for ages 13 and up. May contain violence, suggestive themes, crude humor, minimal blood, simulated gambling, and/or infrequent use of strong language.",
                            ImageLink = "Link to image",
                            Name = "Teen",
                            RatingsCountry = "USA",
                            RatingsSystem = "ESRB",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2225)
                        },
                        new
                        {
                            RatingId = 5,
                            Age = 0,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2235),
                            Definition = "Titles rated M (Mature) have content that is generally suitable for persons ages 17 and up. May contain intense violence, blood and gore, sexual content and/or strong language.",
                            ImageLink = "Link to image",
                            Name = "Mature",
                            RatingsCountry = "USA",
                            RatingsSystem = "ESRB",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2237)
                        },
                        new
                        {
                            RatingId = 6,
                            Age = 0,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2245),
                            Definition = "Titles rated AO (Adults Only) have content that is only suitable for persons ages 17 and up. May contain intense violence, blood and gore, sexual content and/or strong language.",
                            ImageLink = "Link to image",
                            Name = "Adults Only 18+",
                            RatingsCountry = "USA",
                            RatingsSystem = "ESRB",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2248)
                        },
                        new
                        {
                            RatingId = 7,
                            Age = 0,
                            CreatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2256),
                            Definition = "Titles listed as RP (Rating Pending) have not yet been assigned a final ESRB rating. (This symbol appears only in advertising and promotional materials prior to a game's release, and will be replaced by a game’s rating once it has been assigned.)",
                            ImageLink = "Link to image",
                            Name = "Rating Pending",
                            RatingsCountry = "USA",
                            RatingsSystem = "ESRB",
                            UpdatedAt = new DateTime(2019, 7, 1, 16, 24, 17, 296, DateTimeKind.Local).AddTicks(2258)
                        });
                });

            modelBuilder.Entity("AccountAPI.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AccountAPI.Models.Account", b =>
                {
                    b.HasOne("AccountAPI.Models.Event", "Event")
                        .WithMany("Accounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountAPI.Models.AccountProfile", b =>
                {
                    b.HasOne("AccountAPI.Models.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("AccountAPI.Models.AccountProfile", "AccountProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountAPI.Models.Code", b =>
                {
                    b.HasOne("AccountAPI.Models.Game")
                        .WithMany("Codes")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("AccountAPI.Models.GameAccount", b =>
                {
                    b.HasOne("AccountAPI.Models.Account", "Account")
                        .WithMany("GameAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountAPI.Models.Game", "Game")
                        .WithMany("GameAccounts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountAPI.Models.GameControllerType", b =>
                {
                    b.HasOne("AccountAPI.Models.ControllerType", "ControllerType")
                        .WithMany("GameControllerTypes")
                        .HasForeignKey("ControllerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountAPI.Models.Game", "Game")
                        .WithMany("GameControllerTypes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountAPI.Models.GamePlatform", b =>
                {
                    b.HasOne("AccountAPI.Models.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountAPI.Models.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountAPI.Models.GameRating", b =>
                {
                    b.HasOne("AccountAPI.Models.Game", "Game")
                        .WithMany("GameRatings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccountAPI.Models.Rating", "Rating")
                        .WithMany("GameRatings")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AccountAPI.Models.Platform", b =>
                {
                    b.HasOne("AccountAPI.Models.PlatformType", "PlatformType")
                        .WithMany("Platforms")
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
