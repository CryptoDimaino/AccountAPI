// <auto-generated />
using System;
using AccountAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AccountAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190628164138_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccountAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckedOutStatus");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailPassword")
                        .IsRequired();

                    b.Property<string>("EventLocation")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountAPI.Models.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeString")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UsedStatus")
                        .IsRequired();

                    b.HasKey("CodeId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("AccountAPI.Models.ControllerType", b =>
                {
                    b.Property<int>("ControllerTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ControllerTypeId");

                    b.HasIndex("AccountId");

                    b.ToTable("ControllerTypes");
                });

            modelBuilder.Entity("AccountAPI.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<bool>("ConnectionType");

                    b.Property<int?>("ControllerTypeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("GameId1");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("URLToDocumentation")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("GameId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ControllerTypeId");

                    b.HasIndex("GameId1");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("AccountAPI.Models.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("PlatformId");

                    b.HasIndex("AccountId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("AccountAPI.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("RatingString")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AccountAPI.Models.RatingType", b =>
                {
                    b.Property<int>("RatingTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Definitions")
                        .IsRequired();

                    b.Property<string>("GameRatingURL")
                        .IsRequired();

                    b.Property<string>("ImageLink")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("RatingTypeId");

                    b.ToTable("RatingTypes");
                });

            modelBuilder.Entity("AccountAPI.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AccountAPI.Models.ControllerType", b =>
                {
                    b.HasOne("AccountAPI.Models.Account")
                        .WithMany("ControllerType")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("AccountAPI.Models.Game", b =>
                {
                    b.HasOne("AccountAPI.Models.Account")
                        .WithMany("Games")
                        .HasForeignKey("AccountId");

                    b.HasOne("AccountAPI.Models.ControllerType")
                        .WithMany("Games")
                        .HasForeignKey("ControllerTypeId");

                    b.HasOne("AccountAPI.Models.Game")
                        .WithMany("Games")
                        .HasForeignKey("GameId1");
                });

            modelBuilder.Entity("AccountAPI.Models.Platform", b =>
                {
                    b.HasOne("AccountAPI.Models.Account")
                        .WithMany("Platforms")
                        .HasForeignKey("AccountId");
                });
#pragma warning restore 612, 618
        }
    }
}
